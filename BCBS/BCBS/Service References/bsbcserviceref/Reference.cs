//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BCBS.bsbcserviceref {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="bsbcserviceref.IBCBS")]
    public interface IBCBS {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertProject", ReplyAction="http://tempuri.org/IBCBS/InsertProjectResponse")]
        long InsertProject(string name, string charge_code, string high_level_budget, string status, string description, string rc, string glaccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertProject", ReplyAction="http://tempuri.org/IBCBS/InsertProjectResponse")]
        System.Threading.Tasks.Task<long> InsertProjectAsync(string name, string charge_code, string high_level_budget, string status, string description, string rc, string glaccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectList", ReplyAction="http://tempuri.org/IBCBS/GetProjectListResponse")]
        string GetProjectList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectList", ReplyAction="http://tempuri.org/IBCBS/GetProjectListResponse")]
        System.Threading.Tasks.Task<string> GetProjectListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectById", ReplyAction="http://tempuri.org/IBCBS/GetProjectByIdResponse")]
        string GetProjectById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectById", ReplyAction="http://tempuri.org/IBCBS/GetProjectByIdResponse")]
        System.Threading.Tasks.Task<string> GetProjectByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdateProjectById", ReplyAction="http://tempuri.org/IBCBS/UpdateProjectByIdResponse")]
        long UpdateProjectById(long Id, string name, string charge_code, string high_level_budget, string status, string description, string rc, string glaccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdateProjectById", ReplyAction="http://tempuri.org/IBCBS/UpdateProjectByIdResponse")]
        System.Threading.Tasks.Task<long> UpdateProjectByIdAsync(long Id, string name, string charge_code, string high_level_budget, string status, string description, string rc, string glaccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteProjectById", ReplyAction="http://tempuri.org/IBCBS/DeleteProjectByIdResponse")]
        bool DeleteProjectById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteProjectById", ReplyAction="http://tempuri.org/IBCBS/DeleteProjectByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteProjectByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectAvailableBalance", ReplyAction="http://tempuri.org/IBCBS/GetProjectAvailableBalanceResponse")]
        string GetProjectAvailableBalance(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectAvailableBalance", ReplyAction="http://tempuri.org/IBCBS/GetProjectAvailableBalanceResponse")]
        System.Threading.Tasks.Task<string> GetProjectAvailableBalanceAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/CheckIsChargeCodeExist", ReplyAction="http://tempuri.org/IBCBS/CheckIsChargeCodeExistResponse")]
        bool CheckIsChargeCodeExist(string chargecode, string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/CheckIsChargeCodeExist", ReplyAction="http://tempuri.org/IBCBS/CheckIsChargeCodeExistResponse")]
        System.Threading.Tasks.Task<bool> CheckIsChargeCodeExistAsync(string chargecode, string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertServiceType", ReplyAction="http://tempuri.org/IBCBS/InsertServiceTypeResponse")]
        long InsertServiceType(string name, System.Nullable<long> projectid, string status, string feestype, double budget, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertServiceType", ReplyAction="http://tempuri.org/IBCBS/InsertServiceTypeResponse")]
        System.Threading.Tasks.Task<long> InsertServiceTypeAsync(string name, System.Nullable<long> projectid, string status, string feestype, double budget, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceTypeList", ReplyAction="http://tempuri.org/IBCBS/GetServiceTypeListResponse")]
        string GetServiceTypeList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceTypeList", ReplyAction="http://tempuri.org/IBCBS/GetServiceTypeListResponse")]
        System.Threading.Tasks.Task<string> GetServiceTypeListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceTypeById", ReplyAction="http://tempuri.org/IBCBS/GetServiceTypeByIdResponse")]
        string GetServiceTypeById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceTypeById", ReplyAction="http://tempuri.org/IBCBS/GetServiceTypeByIdResponse")]
        System.Threading.Tasks.Task<string> GetServiceTypeByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceTypesByProjectId", ReplyAction="http://tempuri.org/IBCBS/GetServiceTypesByProjectIdResponse")]
        string GetServiceTypesByProjectId(long projectid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceTypesByProjectId", ReplyAction="http://tempuri.org/IBCBS/GetServiceTypesByProjectIdResponse")]
        System.Threading.Tasks.Task<string> GetServiceTypesByProjectIdAsync(long projectid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdateServiceTypeById", ReplyAction="http://tempuri.org/IBCBS/UpdateServiceTypeByIdResponse")]
        long UpdateServiceTypeById(long Id, string name, System.Nullable<long> projectid, string status, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdateServiceTypeById", ReplyAction="http://tempuri.org/IBCBS/UpdateServiceTypeByIdResponse")]
        System.Threading.Tasks.Task<long> UpdateServiceTypeByIdAsync(long Id, string name, System.Nullable<long> projectid, string status, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteServiceTypeById", ReplyAction="http://tempuri.org/IBCBS/DeleteServiceTypeByIdResponse")]
        bool DeleteServiceTypeById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteServiceTypeById", ReplyAction="http://tempuri.org/IBCBS/DeleteServiceTypeByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteServiceTypeByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcustomerList", ReplyAction="http://tempuri.org/IBCBS/GetcustomerListResponse")]
        string GetcustomerList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcustomerList", ReplyAction="http://tempuri.org/IBCBS/GetcustomerListResponse")]
        System.Threading.Tasks.Task<string> GetcustomerListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetCustomerListForSBF", ReplyAction="http://tempuri.org/IBCBS/GetCustomerListForSBFResponse")]
        string GetCustomerListForSBF();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetCustomerListForSBF", ReplyAction="http://tempuri.org/IBCBS/GetCustomerListForSBFResponse")]
        System.Threading.Tasks.Task<string> GetCustomerListForSBFAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetCustomerListForPlanCustomer", ReplyAction="http://tempuri.org/IBCBS/GetCustomerListForPlanCustomerResponse")]
        string GetCustomerListForPlanCustomer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetCustomerListForPlanCustomer", ReplyAction="http://tempuri.org/IBCBS/GetCustomerListForPlanCustomerResponse")]
        System.Threading.Tasks.Task<string> GetCustomerListForPlanCustomerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/Insertcustomer", ReplyAction="http://tempuri.org/IBCBS/InsertcustomerResponse")]
        long Insertcustomer(string name, string charge_code, string customertype, string address, string city, string postalcode, string state, string country, string firstname, string lastname, string phone, string fax, string occupation, string email, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/Insertcustomer", ReplyAction="http://tempuri.org/IBCBS/InsertcustomerResponse")]
        System.Threading.Tasks.Task<long> InsertcustomerAsync(string name, string charge_code, string customertype, string address, string city, string postalcode, string state, string country, string firstname, string lastname, string phone, string fax, string occupation, string email, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdatecustomerById", ReplyAction="http://tempuri.org/IBCBS/UpdatecustomerByIdResponse")]
        long UpdatecustomerById(
                    long Id, 
                    string name, 
                    string charge_code, 
                    string customertype, 
                    string address, 
                    string city, 
                    string postalcode, 
                    string state, 
                    string country, 
                    string firstname, 
                    string lastname, 
                    string phone, 
                    string fax, 
                    string occupation, 
                    string email, 
                    string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdatecustomerById", ReplyAction="http://tempuri.org/IBCBS/UpdatecustomerByIdResponse")]
        System.Threading.Tasks.Task<long> UpdatecustomerByIdAsync(
                    long Id, 
                    string name, 
                    string charge_code, 
                    string customertype, 
                    string address, 
                    string city, 
                    string postalcode, 
                    string state, 
                    string country, 
                    string firstname, 
                    string lastname, 
                    string phone, 
                    string fax, 
                    string occupation, 
                    string email, 
                    string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcustomerById", ReplyAction="http://tempuri.org/IBCBS/GetcustomerByIdResponse")]
        string GetcustomerById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcustomerById", ReplyAction="http://tempuri.org/IBCBS/GetcustomerByIdResponse")]
        System.Threading.Tasks.Task<string> GetcustomerByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcustomerByContractId", ReplyAction="http://tempuri.org/IBCBS/GetcustomerByContractIdResponse")]
        string GetcustomerByContractId(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcustomerByContractId", ReplyAction="http://tempuri.org/IBCBS/GetcustomerByContractIdResponse")]
        System.Threading.Tasks.Task<string> GetcustomerByContractIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeletecustomerById", ReplyAction="http://tempuri.org/IBCBS/DeletecustomerByIdResponse")]
        bool DeletecustomerById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeletecustomerById", ReplyAction="http://tempuri.org/IBCBS/DeletecustomerByIdResponse")]
        System.Threading.Tasks.Task<bool> DeletecustomerByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertCustomerInvoice", ReplyAction="http://tempuri.org/IBCBS/InsertCustomerInvoiceResponse")]
        long InsertCustomerInvoice(string invoicenumber, long customerid, System.DateTime invoicedate, string prepareby, string preparebyext, string authorizedby, string authorizedbyext, string division, bool isdeffered, string defferedaccount, System.DateTime fromdate, System.DateTime todate, string specialinstruction, string supportingdocuments, double totalamount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertCustomerInvoice", ReplyAction="http://tempuri.org/IBCBS/InsertCustomerInvoiceResponse")]
        System.Threading.Tasks.Task<long> InsertCustomerInvoiceAsync(string invoicenumber, long customerid, System.DateTime invoicedate, string prepareby, string preparebyext, string authorizedby, string authorizedbyext, string division, bool isdeffered, string defferedaccount, System.DateTime fromdate, System.DateTime todate, string specialinstruction, string supportingdocuments, double totalamount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractByCustomerId", ReplyAction="http://tempuri.org/IBCBS/GetContractByCustomerIdResponse")]
        string GetContractByCustomerId(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractByCustomerId", ReplyAction="http://tempuri.org/IBCBS/GetContractByCustomerIdResponse")]
        System.Threading.Tasks.Task<string> GetContractByCustomerIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractbyCustomerIdHaveActivity", ReplyAction="http://tempuri.org/IBCBS/GetContractbyCustomerIdHaveActivityResponse")]
        string GetContractbyCustomerIdHaveActivity(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractbyCustomerIdHaveActivity", ReplyAction="http://tempuri.org/IBCBS/GetContractbyCustomerIdHaveActivityResponse")]
        System.Threading.Tasks.Task<string> GetContractbyCustomerIdHaveActivityAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetActivitiesByCustomerId", ReplyAction="http://tempuri.org/IBCBS/GetActivitiesByCustomerIdResponse")]
        string GetActivitiesByCustomerId(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetActivitiesByCustomerId", ReplyAction="http://tempuri.org/IBCBS/GetActivitiesByCustomerIdResponse")]
        System.Threading.Tasks.Task<string> GetActivitiesByCustomerIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertSBFActivity", ReplyAction="http://tempuri.org/IBCBS/InsertSBFActivityResponse")]
        long InsertSBFActivity(long sbfid, long activityid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertSBFActivity", ReplyAction="http://tempuri.org/IBCBS/InsertSBFActivityResponse")]
        System.Threading.Tasks.Task<long> InsertSBFActivityAsync(long sbfid, long activityid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/SetActivityBilled", ReplyAction="http://tempuri.org/IBCBS/SetActivityBilledResponse")]
        bool SetActivityBilled(string activityids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/SetActivityBilled", ReplyAction="http://tempuri.org/IBCBS/SetActivityBilledResponse")]
        System.Threading.Tasks.Task<bool> SetActivityBilledAsync(string activityids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAcknowledgementList", ReplyAction="http://tempuri.org/IBCBS/GetAcknowledgementListResponse")]
        string GetAcknowledgementList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAcknowledgementList", ReplyAction="http://tempuri.org/IBCBS/GetAcknowledgementListResponse")]
        System.Threading.Tasks.Task<string> GetAcknowledgementListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectServiceList", ReplyAction="http://tempuri.org/IBCBS/GetProjectServiceListResponse")]
        string GetProjectServiceList(long projectId, string serviceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectServiceList", ReplyAction="http://tempuri.org/IBCBS/GetProjectServiceListResponse")]
        System.Threading.Tasks.Task<string> GetProjectServiceListAsync(long projectId, string serviceIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAcknowledgementProjectServiceList", ReplyAction="http://tempuri.org/IBCBS/GetAcknowledgementProjectServiceListResponse")]
        string GetAcknowledgementProjectServiceList(long projectId, string serviceIds, string ackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAcknowledgementProjectServiceList", ReplyAction="http://tempuri.org/IBCBS/GetAcknowledgementProjectServiceListResponse")]
        System.Threading.Tasks.Task<string> GetAcknowledgementProjectServiceListAsync(long projectId, string serviceIds, string ackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertCustomerAcknoeledgement", ReplyAction="http://tempuri.org/IBCBS/InsertCustomerAcknoeledgementResponse")]
        long InsertCustomerAcknoeledgement(long customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertCustomerAcknoeledgement", ReplyAction="http://tempuri.org/IBCBS/InsertCustomerAcknoeledgementResponse")]
        System.Threading.Tasks.Task<long> InsertCustomerAcknoeledgementAsync(long customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertAcknowledgementServices", ReplyAction="http://tempuri.org/IBCBS/InsertAcknowledgementServicesResponse")]
        long InsertAcknowledgementServices(long acknowledgementid, long projectid, long serviceid, double total, string volume, System.DateTime fromdate, System.DateTime todate, string feestype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertAcknowledgementServices", ReplyAction="http://tempuri.org/IBCBS/InsertAcknowledgementServicesResponse")]
        System.Threading.Tasks.Task<long> InsertAcknowledgementServicesAsync(long acknowledgementid, long projectid, long serviceid, double total, string volume, System.DateTime fromdate, System.DateTime todate, string feestype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAcknowledgementServicesbyAcknowledgemetnId", ReplyAction="http://tempuri.org/IBCBS/GetAcknowledgementServicesbyAcknowledgemetnIdResponse")]
        string GetAcknowledgementServicesbyAcknowledgemetnId(long ackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAcknowledgementServicesbyAcknowledgemetnId", ReplyAction="http://tempuri.org/IBCBS/GetAcknowledgementServicesbyAcknowledgemetnIdResponse")]
        System.Threading.Tasks.Task<string> GetAcknowledgementServicesbyAcknowledgemetnIdAsync(long ackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/AcknowledgementApprove", ReplyAction="http://tempuri.org/IBCBS/AcknowledgementApproveResponse")]
        long AcknowledgementApprove(long ackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/AcknowledgementApprove", ReplyAction="http://tempuri.org/IBCBS/AcknowledgementApproveResponse")]
        System.Threading.Tasks.Task<long> AcknowledgementApproveAsync(long ackid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteAcknowledgementById", ReplyAction="http://tempuri.org/IBCBS/DeleteAcknowledgementByIdResponse")]
        bool DeleteAcknowledgementById(string ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteAcknowledgementById", ReplyAction="http://tempuri.org/IBCBS/DeleteAcknowledgementByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteAcknowledgementByIdAsync(string ids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcontractList", ReplyAction="http://tempuri.org/IBCBS/GetcontractListResponse")]
        string GetcontractList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcontractList", ReplyAction="http://tempuri.org/IBCBS/GetcontractListResponse")]
        System.Threading.Tasks.Task<string> GetcontractListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcontractListByProjectId", ReplyAction="http://tempuri.org/IBCBS/GetcontractListByProjectIdResponse")]
        string GetcontractListByProjectId(long projectid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcontractListByProjectId", ReplyAction="http://tempuri.org/IBCBS/GetcontractListByProjectIdResponse")]
        System.Threading.Tasks.Task<string> GetcontractListByProjectIdAsync(long projectid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/Insertcontract", ReplyAction="http://tempuri.org/IBCBS/InsertcontractResponse")]
        long Insertcontract(long customer, long service_type, System.DateTime fromdate, System.DateTime enddate, bool dirrection, bool estimate, string status, string volume, double amount, long projectid, string description, string contractcode, string filename, string feestype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/Insertcontract", ReplyAction="http://tempuri.org/IBCBS/InsertcontractResponse")]
        System.Threading.Tasks.Task<long> InsertcontractAsync(long customer, long service_type, System.DateTime fromdate, System.DateTime enddate, bool dirrection, bool estimate, string status, string volume, double amount, long projectid, string description, string contractcode, string filename, string feestype);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdatecontractById", ReplyAction="http://tempuri.org/IBCBS/UpdatecontractByIdResponse")]
        long UpdatecontractById(long Id, System.DateTime enddate, string status, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdatecontractById", ReplyAction="http://tempuri.org/IBCBS/UpdatecontractByIdResponse")]
        System.Threading.Tasks.Task<long> UpdatecontractByIdAsync(long Id, System.DateTime enddate, string status, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcontractById", ReplyAction="http://tempuri.org/IBCBS/GetcontractByIdResponse")]
        string GetcontractById(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetcontractById", ReplyAction="http://tempuri.org/IBCBS/GetcontractByIdResponse")]
        System.Threading.Tasks.Task<string> GetcontractByIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteContractById", ReplyAction="http://tempuri.org/IBCBS/DeleteContractByIdResponse")]
        bool DeleteContractById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteContractById", ReplyAction="http://tempuri.org/IBCBS/DeleteContractByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteContractByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractAvailableBalance", ReplyAction="http://tempuri.org/IBCBS/GetContractAvailableBalanceResponse")]
        string GetContractAvailableBalance(long contractid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractAvailableBalance", ReplyAction="http://tempuri.org/IBCBS/GetContractAvailableBalanceResponse")]
        System.Threading.Tasks.Task<string> GetContractAvailableBalanceAsync(long contractid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/CheckStausIsActive", ReplyAction="http://tempuri.org/IBCBS/CheckStausIsActiveResponse")]
        bool CheckStausIsActive(long id, string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/CheckStausIsActive", ReplyAction="http://tempuri.org/IBCBS/CheckStausIsActiveResponse")]
        System.Threading.Tasks.Task<bool> CheckStausIsActiveAsync(long id, string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/CheckIsContractCodeExist", ReplyAction="http://tempuri.org/IBCBS/CheckIsContractCodeExistResponse")]
        bool CheckIsContractCodeExist(string contractCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/CheckIsContractCodeExist", ReplyAction="http://tempuri.org/IBCBS/CheckIsContractCodeExistResponse")]
        System.Threading.Tasks.Task<bool> CheckIsContractCodeExistAsync(string contractCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertContractActivity", ReplyAction="http://tempuri.org/IBCBS/InsertContractActivityResponse")]
        long InsertContractActivity(long contractid, System.DateTime fromdate, System.DateTime enddate, double volume, double amount, bool charges, bool estimate, string description, string status, string filename, string activitycode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/InsertContractActivity", ReplyAction="http://tempuri.org/IBCBS/InsertContractActivityResponse")]
        System.Threading.Tasks.Task<long> InsertContractActivityAsync(long contractid, System.DateTime fromdate, System.DateTime enddate, double volume, double amount, bool charges, bool estimate, string description, string status, string filename, string activitycode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdateContractActivity", ReplyAction="http://tempuri.org/IBCBS/UpdateContractActivityResponse")]
        long UpdateContractActivity(long id, long contractid, System.DateTime fromdate, System.DateTime enddate, double volume, double amount, bool charges, bool estimate, string description, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/UpdateContractActivity", ReplyAction="http://tempuri.org/IBCBS/UpdateContractActivityResponse")]
        System.Threading.Tasks.Task<long> UpdateContractActivityAsync(long id, long contractid, System.DateTime fromdate, System.DateTime enddate, double volume, double amount, bool charges, bool estimate, string description, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetLastContractActivity", ReplyAction="http://tempuri.org/IBCBS/GetLastContractActivityResponse")]
        string GetLastContractActivity(long contractid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetLastContractActivity", ReplyAction="http://tempuri.org/IBCBS/GetLastContractActivityResponse")]
        System.Threading.Tasks.Task<string> GetLastContractActivityAsync(long contractid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetActivitiesByContractIds", ReplyAction="http://tempuri.org/IBCBS/GetActivitiesByContractIdsResponse")]
        string GetActivitiesByContractIds(string contractid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetActivitiesByContractIds", ReplyAction="http://tempuri.org/IBCBS/GetActivitiesByContractIdsResponse")]
        System.Threading.Tasks.Task<string> GetActivitiesByContractIdsAsync(string contractid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetActivitiesByActivityIds", ReplyAction="http://tempuri.org/IBCBS/GetActivitiesByActivityIdsResponse")]
        string GetActivitiesByActivityIds(string activityids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetActivitiesByActivityIds", ReplyAction="http://tempuri.org/IBCBS/GetActivitiesByActivityIdsResponse")]
        System.Threading.Tasks.Task<string> GetActivitiesByActivityIdsAsync(string activityids);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAllActivities", ReplyAction="http://tempuri.org/IBCBS/GetAllActivitiesResponse")]
        string GetAllActivities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAllActivities", ReplyAction="http://tempuri.org/IBCBS/GetAllActivitiesResponse")]
        System.Threading.Tasks.Task<string> GetAllActivitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetActivityById", ReplyAction="http://tempuri.org/IBCBS/GetActivityByIdResponse")]
        string GetActivityById(long activityid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetActivityById", ReplyAction="http://tempuri.org/IBCBS/GetActivityByIdResponse")]
        System.Threading.Tasks.Task<string> GetActivityByIdAsync(long activityid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteActivityById", ReplyAction="http://tempuri.org/IBCBS/DeleteActivityByIdResponse")]
        bool DeleteActivityById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/DeleteActivityById", ReplyAction="http://tempuri.org/IBCBS/DeleteActivityByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteActivityByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/CheckIsActivityCodeExist", ReplyAction="http://tempuri.org/IBCBS/CheckIsActivityCodeExistResponse")]
        bool CheckIsActivityCodeExist(string activityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/CheckIsActivityCodeExist", ReplyAction="http://tempuri.org/IBCBS/CheckIsActivityCodeExistResponse")]
        System.Threading.Tasks.Task<bool> CheckIsActivityCodeExistAsync(string activityCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractFeesTypeByServiceId", ReplyAction="http://tempuri.org/IBCBS/GetContractFeesTypeByServiceIdResponse")]
        string GetContractFeesTypeByServiceId(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractFeesTypeByServiceId", ReplyAction="http://tempuri.org/IBCBS/GetContractFeesTypeByServiceIdResponse")]
        System.Threading.Tasks.Task<string> GetContractFeesTypeByServiceIdAsync(long id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAccuralReportMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetAccuralReportMonthYearResponse")]
        string GetAccuralReportMonthYear();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAccuralReportMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetAccuralReportMonthYearResponse")]
        System.Threading.Tasks.Task<string> GetAccuralReportMonthYearAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAccuralReportByMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetAccuralReportByMonthYearResponse")]
        string GetAccuralReportByMonthYear(string month, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAccuralReportByMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetAccuralReportByMonthYearResponse")]
        System.Threading.Tasks.Task<string> GetAccuralReportByMonthYearAsync(string month, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAccuralReportByDate", ReplyAction="http://tempuri.org/IBCBS/GetAccuralReportByDateResponse")]
        string GetAccuralReportByDate(string fromdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetAccuralReportByDate", ReplyAction="http://tempuri.org/IBCBS/GetAccuralReportByDateResponse")]
        System.Threading.Tasks.Task<string> GetAccuralReportByDateAsync(string fromdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceByProjectId", ReplyAction="http://tempuri.org/IBCBS/GetServiceByProjectIdResponse")]
        string GetServiceByProjectId(long projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceByProjectId", ReplyAction="http://tempuri.org/IBCBS/GetServiceByProjectIdResponse")]
        System.Threading.Tasks.Task<string> GetServiceByProjectIdAsync(long projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetCustomerByServiceAndProjectId", ReplyAction="http://tempuri.org/IBCBS/GetCustomerByServiceAndProjectIdResponse")]
        string GetCustomerByServiceAndProjectId(long serviceId, long projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetCustomerByServiceAndProjectId", ReplyAction="http://tempuri.org/IBCBS/GetCustomerByServiceAndProjectIdResponse")]
        System.Threading.Tasks.Task<string> GetCustomerByServiceAndProjectIdAsync(long serviceId, long projectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractDetailForActivity", ReplyAction="http://tempuri.org/IBCBS/GetContractDetailForActivityResponse")]
        string GetContractDetailForActivity(long projectId, long serviceId, long customerId, string fromMonth, string toMonth, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetContractDetailForActivity", ReplyAction="http://tempuri.org/IBCBS/GetContractDetailForActivityResponse")]
        System.Threading.Tasks.Task<string> GetContractDetailForActivityAsync(long projectId, long serviceId, long customerId, string fromMonth, string toMonth, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectRevenueExpenseMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetProjectRevenueExpenseMonthYearResponse")]
        string GetProjectRevenueExpenseMonthYear(string month, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectRevenueExpenseMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetProjectRevenueExpenseMonthYearResponse")]
        System.Threading.Tasks.Task<string> GetProjectRevenueExpenseMonthYearAsync(string month, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectRevenueExpenseByDate", ReplyAction="http://tempuri.org/IBCBS/GetProjectRevenueExpenseByDateResponse")]
        string GetProjectRevenueExpenseByDate(string fromdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetProjectRevenueExpenseByDate", ReplyAction="http://tempuri.org/IBCBS/GetProjectRevenueExpenseByDateResponse")]
        System.Threading.Tasks.Task<string> GetProjectRevenueExpenseByDateAsync(string fromdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceRevenueExpenseMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetServiceRevenueExpenseMonthYearResponse")]
        string GetServiceRevenueExpenseMonthYear(string month, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceRevenueExpenseMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetServiceRevenueExpenseMonthYearResponse")]
        System.Threading.Tasks.Task<string> GetServiceRevenueExpenseMonthYearAsync(string month, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceRevenueExpenseByDate", ReplyAction="http://tempuri.org/IBCBS/GetServiceRevenueExpenseByDateResponse")]
        string GetServiceRevenueExpenseByDate(string fromdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetServiceRevenueExpenseByDate", ReplyAction="http://tempuri.org/IBCBS/GetServiceRevenueExpenseByDateResponse")]
        System.Threading.Tasks.Task<string> GetServiceRevenueExpenseByDateAsync(string fromdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetPlanCustomerRevenueExpenseMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetPlanCustomerRevenueExpenseMonthYearResponse")]
        string GetPlanCustomerRevenueExpenseMonthYear(string month, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetPlanCustomerRevenueExpenseMonthYear", ReplyAction="http://tempuri.org/IBCBS/GetPlanCustomerRevenueExpenseMonthYearResponse")]
        System.Threading.Tasks.Task<string> GetPlanCustomerRevenueExpenseMonthYearAsync(string month, string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetPlanCustomerRevenueExpenseByDate", ReplyAction="http://tempuri.org/IBCBS/GetPlanCustomerRevenueExpenseByDateResponse")]
        string GetPlanCustomerRevenueExpenseByDate(string fromdate, string todate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBCBS/GetPlanCustomerRevenueExpenseByDate", ReplyAction="http://tempuri.org/IBCBS/GetPlanCustomerRevenueExpenseByDateResponse")]
        System.Threading.Tasks.Task<string> GetPlanCustomerRevenueExpenseByDateAsync(string fromdate, string todate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBCBSChannel : BCBS.bsbcserviceref.IBCBS, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BCBSClient : System.ServiceModel.ClientBase<BCBS.bsbcserviceref.IBCBS>, BCBS.bsbcserviceref.IBCBS {
        
        public BCBSClient() {
        }
        
        public BCBSClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BCBSClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BCBSClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BCBSClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long InsertProject(string name, string charge_code, string high_level_budget, string status, string description, string rc, string glaccount) {
            return base.Channel.InsertProject(name, charge_code, high_level_budget, status, description, rc, glaccount);
        }
        
        public System.Threading.Tasks.Task<long> InsertProjectAsync(string name, string charge_code, string high_level_budget, string status, string description, string rc, string glaccount) {
            return base.Channel.InsertProjectAsync(name, charge_code, high_level_budget, status, description, rc, glaccount);
        }
        
        public string GetProjectList() {
            return base.Channel.GetProjectList();
        }
        
        public System.Threading.Tasks.Task<string> GetProjectListAsync() {
            return base.Channel.GetProjectListAsync();
        }
        
        public string GetProjectById(long id) {
            return base.Channel.GetProjectById(id);
        }
        
        public System.Threading.Tasks.Task<string> GetProjectByIdAsync(long id) {
            return base.Channel.GetProjectByIdAsync(id);
        }
        
        public long UpdateProjectById(long Id, string name, string charge_code, string high_level_budget, string status, string description, string rc, string glaccount) {
            return base.Channel.UpdateProjectById(Id, name, charge_code, high_level_budget, status, description, rc, glaccount);
        }
        
        public System.Threading.Tasks.Task<long> UpdateProjectByIdAsync(long Id, string name, string charge_code, string high_level_budget, string status, string description, string rc, string glaccount) {
            return base.Channel.UpdateProjectByIdAsync(Id, name, charge_code, high_level_budget, status, description, rc, glaccount);
        }
        
        public bool DeleteProjectById(string id) {
            return base.Channel.DeleteProjectById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteProjectByIdAsync(string id) {
            return base.Channel.DeleteProjectByIdAsync(id);
        }
        
        public string GetProjectAvailableBalance(long id) {
            return base.Channel.GetProjectAvailableBalance(id);
        }
        
        public System.Threading.Tasks.Task<string> GetProjectAvailableBalanceAsync(long id) {
            return base.Channel.GetProjectAvailableBalanceAsync(id);
        }
        
        public bool CheckIsChargeCodeExist(string chargecode, string tablename) {
            return base.Channel.CheckIsChargeCodeExist(chargecode, tablename);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIsChargeCodeExistAsync(string chargecode, string tablename) {
            return base.Channel.CheckIsChargeCodeExistAsync(chargecode, tablename);
        }
        
        public long InsertServiceType(string name, System.Nullable<long> projectid, string status, string feestype, double budget, string notes) {
            return base.Channel.InsertServiceType(name, projectid, status, feestype, budget, notes);
        }
        
        public System.Threading.Tasks.Task<long> InsertServiceTypeAsync(string name, System.Nullable<long> projectid, string status, string feestype, double budget, string notes) {
            return base.Channel.InsertServiceTypeAsync(name, projectid, status, feestype, budget, notes);
        }
        
        public string GetServiceTypeList() {
            return base.Channel.GetServiceTypeList();
        }
        
        public System.Threading.Tasks.Task<string> GetServiceTypeListAsync() {
            return base.Channel.GetServiceTypeListAsync();
        }
        
        public string GetServiceTypeById(long id) {
            return base.Channel.GetServiceTypeById(id);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceTypeByIdAsync(long id) {
            return base.Channel.GetServiceTypeByIdAsync(id);
        }
        
        public string GetServiceTypesByProjectId(long projectid) {
            return base.Channel.GetServiceTypesByProjectId(projectid);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceTypesByProjectIdAsync(long projectid) {
            return base.Channel.GetServiceTypesByProjectIdAsync(projectid);
        }
        
        public long UpdateServiceTypeById(long Id, string name, System.Nullable<long> projectid, string status, string notes) {
            return base.Channel.UpdateServiceTypeById(Id, name, projectid, status, notes);
        }
        
        public System.Threading.Tasks.Task<long> UpdateServiceTypeByIdAsync(long Id, string name, System.Nullable<long> projectid, string status, string notes) {
            return base.Channel.UpdateServiceTypeByIdAsync(Id, name, projectid, status, notes);
        }
        
        public bool DeleteServiceTypeById(string id) {
            return base.Channel.DeleteServiceTypeById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServiceTypeByIdAsync(string id) {
            return base.Channel.DeleteServiceTypeByIdAsync(id);
        }
        
        public string GetcustomerList() {
            return base.Channel.GetcustomerList();
        }
        
        public System.Threading.Tasks.Task<string> GetcustomerListAsync() {
            return base.Channel.GetcustomerListAsync();
        }
        
        public string GetCustomerListForSBF() {
            return base.Channel.GetCustomerListForSBF();
        }
        
        public System.Threading.Tasks.Task<string> GetCustomerListForSBFAsync() {
            return base.Channel.GetCustomerListForSBFAsync();
        }
        
        public string GetCustomerListForPlanCustomer() {
            return base.Channel.GetCustomerListForPlanCustomer();
        }
        
        public System.Threading.Tasks.Task<string> GetCustomerListForPlanCustomerAsync() {
            return base.Channel.GetCustomerListForPlanCustomerAsync();
        }
        
        public long Insertcustomer(string name, string charge_code, string customertype, string address, string city, string postalcode, string state, string country, string firstname, string lastname, string phone, string fax, string occupation, string email, string status) {
            return base.Channel.Insertcustomer(name, charge_code, customertype, address, city, postalcode, state, country, firstname, lastname, phone, fax, occupation, email, status);
        }
        
        public System.Threading.Tasks.Task<long> InsertcustomerAsync(string name, string charge_code, string customertype, string address, string city, string postalcode, string state, string country, string firstname, string lastname, string phone, string fax, string occupation, string email, string status) {
            return base.Channel.InsertcustomerAsync(name, charge_code, customertype, address, city, postalcode, state, country, firstname, lastname, phone, fax, occupation, email, status);
        }
        
        public long UpdatecustomerById(
                    long Id, 
                    string name, 
                    string charge_code, 
                    string customertype, 
                    string address, 
                    string city, 
                    string postalcode, 
                    string state, 
                    string country, 
                    string firstname, 
                    string lastname, 
                    string phone, 
                    string fax, 
                    string occupation, 
                    string email, 
                    string status) {
            return base.Channel.UpdatecustomerById(Id, name, charge_code, customertype, address, city, postalcode, state, country, firstname, lastname, phone, fax, occupation, email, status);
        }
        
        public System.Threading.Tasks.Task<long> UpdatecustomerByIdAsync(
                    long Id, 
                    string name, 
                    string charge_code, 
                    string customertype, 
                    string address, 
                    string city, 
                    string postalcode, 
                    string state, 
                    string country, 
                    string firstname, 
                    string lastname, 
                    string phone, 
                    string fax, 
                    string occupation, 
                    string email, 
                    string status) {
            return base.Channel.UpdatecustomerByIdAsync(Id, name, charge_code, customertype, address, city, postalcode, state, country, firstname, lastname, phone, fax, occupation, email, status);
        }
        
        public string GetcustomerById(long id) {
            return base.Channel.GetcustomerById(id);
        }
        
        public System.Threading.Tasks.Task<string> GetcustomerByIdAsync(long id) {
            return base.Channel.GetcustomerByIdAsync(id);
        }
        
        public string GetcustomerByContractId(long id) {
            return base.Channel.GetcustomerByContractId(id);
        }
        
        public System.Threading.Tasks.Task<string> GetcustomerByContractIdAsync(long id) {
            return base.Channel.GetcustomerByContractIdAsync(id);
        }
        
        public bool DeletecustomerById(string id) {
            return base.Channel.DeletecustomerById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeletecustomerByIdAsync(string id) {
            return base.Channel.DeletecustomerByIdAsync(id);
        }
        
        public long InsertCustomerInvoice(string invoicenumber, long customerid, System.DateTime invoicedate, string prepareby, string preparebyext, string authorizedby, string authorizedbyext, string division, bool isdeffered, string defferedaccount, System.DateTime fromdate, System.DateTime todate, string specialinstruction, string supportingdocuments, double totalamount) {
            return base.Channel.InsertCustomerInvoice(invoicenumber, customerid, invoicedate, prepareby, preparebyext, authorizedby, authorizedbyext, division, isdeffered, defferedaccount, fromdate, todate, specialinstruction, supportingdocuments, totalamount);
        }
        
        public System.Threading.Tasks.Task<long> InsertCustomerInvoiceAsync(string invoicenumber, long customerid, System.DateTime invoicedate, string prepareby, string preparebyext, string authorizedby, string authorizedbyext, string division, bool isdeffered, string defferedaccount, System.DateTime fromdate, System.DateTime todate, string specialinstruction, string supportingdocuments, double totalamount) {
            return base.Channel.InsertCustomerInvoiceAsync(invoicenumber, customerid, invoicedate, prepareby, preparebyext, authorizedby, authorizedbyext, division, isdeffered, defferedaccount, fromdate, todate, specialinstruction, supportingdocuments, totalamount);
        }
        
        public string GetContractByCustomerId(long id) {
            return base.Channel.GetContractByCustomerId(id);
        }
        
        public System.Threading.Tasks.Task<string> GetContractByCustomerIdAsync(long id) {
            return base.Channel.GetContractByCustomerIdAsync(id);
        }
        
        public string GetContractbyCustomerIdHaveActivity(long id) {
            return base.Channel.GetContractbyCustomerIdHaveActivity(id);
        }
        
        public System.Threading.Tasks.Task<string> GetContractbyCustomerIdHaveActivityAsync(long id) {
            return base.Channel.GetContractbyCustomerIdHaveActivityAsync(id);
        }
        
        public string GetActivitiesByCustomerId(long id) {
            return base.Channel.GetActivitiesByCustomerId(id);
        }
        
        public System.Threading.Tasks.Task<string> GetActivitiesByCustomerIdAsync(long id) {
            return base.Channel.GetActivitiesByCustomerIdAsync(id);
        }
        
        public long InsertSBFActivity(long sbfid, long activityid) {
            return base.Channel.InsertSBFActivity(sbfid, activityid);
        }
        
        public System.Threading.Tasks.Task<long> InsertSBFActivityAsync(long sbfid, long activityid) {
            return base.Channel.InsertSBFActivityAsync(sbfid, activityid);
        }
        
        public bool SetActivityBilled(string activityids) {
            return base.Channel.SetActivityBilled(activityids);
        }
        
        public System.Threading.Tasks.Task<bool> SetActivityBilledAsync(string activityids) {
            return base.Channel.SetActivityBilledAsync(activityids);
        }
        
        public string GetAcknowledgementList() {
            return base.Channel.GetAcknowledgementList();
        }
        
        public System.Threading.Tasks.Task<string> GetAcknowledgementListAsync() {
            return base.Channel.GetAcknowledgementListAsync();
        }
        
        public string GetProjectServiceList(long projectId, string serviceIds) {
            return base.Channel.GetProjectServiceList(projectId, serviceIds);
        }
        
        public System.Threading.Tasks.Task<string> GetProjectServiceListAsync(long projectId, string serviceIds) {
            return base.Channel.GetProjectServiceListAsync(projectId, serviceIds);
        }
        
        public string GetAcknowledgementProjectServiceList(long projectId, string serviceIds, string ackid) {
            return base.Channel.GetAcknowledgementProjectServiceList(projectId, serviceIds, ackid);
        }
        
        public System.Threading.Tasks.Task<string> GetAcknowledgementProjectServiceListAsync(long projectId, string serviceIds, string ackid) {
            return base.Channel.GetAcknowledgementProjectServiceListAsync(projectId, serviceIds, ackid);
        }
        
        public long InsertCustomerAcknoeledgement(long customerId) {
            return base.Channel.InsertCustomerAcknoeledgement(customerId);
        }
        
        public System.Threading.Tasks.Task<long> InsertCustomerAcknoeledgementAsync(long customerId) {
            return base.Channel.InsertCustomerAcknoeledgementAsync(customerId);
        }
        
        public long InsertAcknowledgementServices(long acknowledgementid, long projectid, long serviceid, double total, string volume, System.DateTime fromdate, System.DateTime todate, string feestype) {
            return base.Channel.InsertAcknowledgementServices(acknowledgementid, projectid, serviceid, total, volume, fromdate, todate, feestype);
        }
        
        public System.Threading.Tasks.Task<long> InsertAcknowledgementServicesAsync(long acknowledgementid, long projectid, long serviceid, double total, string volume, System.DateTime fromdate, System.DateTime todate, string feestype) {
            return base.Channel.InsertAcknowledgementServicesAsync(acknowledgementid, projectid, serviceid, total, volume, fromdate, todate, feestype);
        }
        
        public string GetAcknowledgementServicesbyAcknowledgemetnId(long ackid) {
            return base.Channel.GetAcknowledgementServicesbyAcknowledgemetnId(ackid);
        }
        
        public System.Threading.Tasks.Task<string> GetAcknowledgementServicesbyAcknowledgemetnIdAsync(long ackid) {
            return base.Channel.GetAcknowledgementServicesbyAcknowledgemetnIdAsync(ackid);
        }
        
        public long AcknowledgementApprove(long ackid) {
            return base.Channel.AcknowledgementApprove(ackid);
        }
        
        public System.Threading.Tasks.Task<long> AcknowledgementApproveAsync(long ackid) {
            return base.Channel.AcknowledgementApproveAsync(ackid);
        }
        
        public bool DeleteAcknowledgementById(string ids) {
            return base.Channel.DeleteAcknowledgementById(ids);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAcknowledgementByIdAsync(string ids) {
            return base.Channel.DeleteAcknowledgementByIdAsync(ids);
        }
        
        public string GetcontractList() {
            return base.Channel.GetcontractList();
        }
        
        public System.Threading.Tasks.Task<string> GetcontractListAsync() {
            return base.Channel.GetcontractListAsync();
        }
        
        public string GetcontractListByProjectId(long projectid) {
            return base.Channel.GetcontractListByProjectId(projectid);
        }
        
        public System.Threading.Tasks.Task<string> GetcontractListByProjectIdAsync(long projectid) {
            return base.Channel.GetcontractListByProjectIdAsync(projectid);
        }
        
        public long Insertcontract(long customer, long service_type, System.DateTime fromdate, System.DateTime enddate, bool dirrection, bool estimate, string status, string volume, double amount, long projectid, string description, string contractcode, string filename, string feestype) {
            return base.Channel.Insertcontract(customer, service_type, fromdate, enddate, dirrection, estimate, status, volume, amount, projectid, description, contractcode, filename, feestype);
        }
        
        public System.Threading.Tasks.Task<long> InsertcontractAsync(long customer, long service_type, System.DateTime fromdate, System.DateTime enddate, bool dirrection, bool estimate, string status, string volume, double amount, long projectid, string description, string contractcode, string filename, string feestype) {
            return base.Channel.InsertcontractAsync(customer, service_type, fromdate, enddate, dirrection, estimate, status, volume, amount, projectid, description, contractcode, filename, feestype);
        }
        
        public long UpdatecontractById(long Id, System.DateTime enddate, string status, string description) {
            return base.Channel.UpdatecontractById(Id, enddate, status, description);
        }
        
        public System.Threading.Tasks.Task<long> UpdatecontractByIdAsync(long Id, System.DateTime enddate, string status, string description) {
            return base.Channel.UpdatecontractByIdAsync(Id, enddate, status, description);
        }
        
        public string GetcontractById(long id) {
            return base.Channel.GetcontractById(id);
        }
        
        public System.Threading.Tasks.Task<string> GetcontractByIdAsync(long id) {
            return base.Channel.GetcontractByIdAsync(id);
        }
        
        public bool DeleteContractById(string id) {
            return base.Channel.DeleteContractById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteContractByIdAsync(string id) {
            return base.Channel.DeleteContractByIdAsync(id);
        }
        
        public string GetContractAvailableBalance(long contractid) {
            return base.Channel.GetContractAvailableBalance(contractid);
        }
        
        public System.Threading.Tasks.Task<string> GetContractAvailableBalanceAsync(long contractid) {
            return base.Channel.GetContractAvailableBalanceAsync(contractid);
        }
        
        public bool CheckStausIsActive(long id, string tablename) {
            return base.Channel.CheckStausIsActive(id, tablename);
        }
        
        public System.Threading.Tasks.Task<bool> CheckStausIsActiveAsync(long id, string tablename) {
            return base.Channel.CheckStausIsActiveAsync(id, tablename);
        }
        
        public bool CheckIsContractCodeExist(string contractCode) {
            return base.Channel.CheckIsContractCodeExist(contractCode);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIsContractCodeExistAsync(string contractCode) {
            return base.Channel.CheckIsContractCodeExistAsync(contractCode);
        }
        
        public long InsertContractActivity(long contractid, System.DateTime fromdate, System.DateTime enddate, double volume, double amount, bool charges, bool estimate, string description, string status, string filename, string activitycode) {
            return base.Channel.InsertContractActivity(contractid, fromdate, enddate, volume, amount, charges, estimate, description, status, filename, activitycode);
        }
        
        public System.Threading.Tasks.Task<long> InsertContractActivityAsync(long contractid, System.DateTime fromdate, System.DateTime enddate, double volume, double amount, bool charges, bool estimate, string description, string status, string filename, string activitycode) {
            return base.Channel.InsertContractActivityAsync(contractid, fromdate, enddate, volume, amount, charges, estimate, description, status, filename, activitycode);
        }
        
        public long UpdateContractActivity(long id, long contractid, System.DateTime fromdate, System.DateTime enddate, double volume, double amount, bool charges, bool estimate, string description, string status) {
            return base.Channel.UpdateContractActivity(id, contractid, fromdate, enddate, volume, amount, charges, estimate, description, status);
        }
        
        public System.Threading.Tasks.Task<long> UpdateContractActivityAsync(long id, long contractid, System.DateTime fromdate, System.DateTime enddate, double volume, double amount, bool charges, bool estimate, string description, string status) {
            return base.Channel.UpdateContractActivityAsync(id, contractid, fromdate, enddate, volume, amount, charges, estimate, description, status);
        }
        
        public string GetLastContractActivity(long contractid) {
            return base.Channel.GetLastContractActivity(contractid);
        }
        
        public System.Threading.Tasks.Task<string> GetLastContractActivityAsync(long contractid) {
            return base.Channel.GetLastContractActivityAsync(contractid);
        }
        
        public string GetActivitiesByContractIds(string contractid) {
            return base.Channel.GetActivitiesByContractIds(contractid);
        }
        
        public System.Threading.Tasks.Task<string> GetActivitiesByContractIdsAsync(string contractid) {
            return base.Channel.GetActivitiesByContractIdsAsync(contractid);
        }
        
        public string GetActivitiesByActivityIds(string activityids) {
            return base.Channel.GetActivitiesByActivityIds(activityids);
        }
        
        public System.Threading.Tasks.Task<string> GetActivitiesByActivityIdsAsync(string activityids) {
            return base.Channel.GetActivitiesByActivityIdsAsync(activityids);
        }
        
        public string GetAllActivities() {
            return base.Channel.GetAllActivities();
        }
        
        public System.Threading.Tasks.Task<string> GetAllActivitiesAsync() {
            return base.Channel.GetAllActivitiesAsync();
        }
        
        public string GetActivityById(long activityid) {
            return base.Channel.GetActivityById(activityid);
        }
        
        public System.Threading.Tasks.Task<string> GetActivityByIdAsync(long activityid) {
            return base.Channel.GetActivityByIdAsync(activityid);
        }
        
        public bool DeleteActivityById(string id) {
            return base.Channel.DeleteActivityById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteActivityByIdAsync(string id) {
            return base.Channel.DeleteActivityByIdAsync(id);
        }
        
        public bool CheckIsActivityCodeExist(string activityCode) {
            return base.Channel.CheckIsActivityCodeExist(activityCode);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIsActivityCodeExistAsync(string activityCode) {
            return base.Channel.CheckIsActivityCodeExistAsync(activityCode);
        }
        
        public string GetContractFeesTypeByServiceId(long id) {
            return base.Channel.GetContractFeesTypeByServiceId(id);
        }
        
        public System.Threading.Tasks.Task<string> GetContractFeesTypeByServiceIdAsync(long id) {
            return base.Channel.GetContractFeesTypeByServiceIdAsync(id);
        }
        
        public string GetAccuralReportMonthYear() {
            return base.Channel.GetAccuralReportMonthYear();
        }
        
        public System.Threading.Tasks.Task<string> GetAccuralReportMonthYearAsync() {
            return base.Channel.GetAccuralReportMonthYearAsync();
        }
        
        public string GetAccuralReportByMonthYear(string month, string year) {
            return base.Channel.GetAccuralReportByMonthYear(month, year);
        }
        
        public System.Threading.Tasks.Task<string> GetAccuralReportByMonthYearAsync(string month, string year) {
            return base.Channel.GetAccuralReportByMonthYearAsync(month, year);
        }
        
        public string GetAccuralReportByDate(string fromdate, string todate) {
            return base.Channel.GetAccuralReportByDate(fromdate, todate);
        }
        
        public System.Threading.Tasks.Task<string> GetAccuralReportByDateAsync(string fromdate, string todate) {
            return base.Channel.GetAccuralReportByDateAsync(fromdate, todate);
        }
        
        public string GetServiceByProjectId(long projectId) {
            return base.Channel.GetServiceByProjectId(projectId);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceByProjectIdAsync(long projectId) {
            return base.Channel.GetServiceByProjectIdAsync(projectId);
        }
        
        public string GetCustomerByServiceAndProjectId(long serviceId, long projectId) {
            return base.Channel.GetCustomerByServiceAndProjectId(serviceId, projectId);
        }
        
        public System.Threading.Tasks.Task<string> GetCustomerByServiceAndProjectIdAsync(long serviceId, long projectId) {
            return base.Channel.GetCustomerByServiceAndProjectIdAsync(serviceId, projectId);
        }
        
        public string GetContractDetailForActivity(long projectId, long serviceId, long customerId, string fromMonth, string toMonth, string year) {
            return base.Channel.GetContractDetailForActivity(projectId, serviceId, customerId, fromMonth, toMonth, year);
        }
        
        public System.Threading.Tasks.Task<string> GetContractDetailForActivityAsync(long projectId, long serviceId, long customerId, string fromMonth, string toMonth, string year) {
            return base.Channel.GetContractDetailForActivityAsync(projectId, serviceId, customerId, fromMonth, toMonth, year);
        }
        
        public string GetProjectRevenueExpenseMonthYear(string month, string year) {
            return base.Channel.GetProjectRevenueExpenseMonthYear(month, year);
        }
        
        public System.Threading.Tasks.Task<string> GetProjectRevenueExpenseMonthYearAsync(string month, string year) {
            return base.Channel.GetProjectRevenueExpenseMonthYearAsync(month, year);
        }
        
        public string GetProjectRevenueExpenseByDate(string fromdate, string todate) {
            return base.Channel.GetProjectRevenueExpenseByDate(fromdate, todate);
        }
        
        public System.Threading.Tasks.Task<string> GetProjectRevenueExpenseByDateAsync(string fromdate, string todate) {
            return base.Channel.GetProjectRevenueExpenseByDateAsync(fromdate, todate);
        }
        
        public string GetServiceRevenueExpenseMonthYear(string month, string year) {
            return base.Channel.GetServiceRevenueExpenseMonthYear(month, year);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceRevenueExpenseMonthYearAsync(string month, string year) {
            return base.Channel.GetServiceRevenueExpenseMonthYearAsync(month, year);
        }
        
        public string GetServiceRevenueExpenseByDate(string fromdate, string todate) {
            return base.Channel.GetServiceRevenueExpenseByDate(fromdate, todate);
        }
        
        public System.Threading.Tasks.Task<string> GetServiceRevenueExpenseByDateAsync(string fromdate, string todate) {
            return base.Channel.GetServiceRevenueExpenseByDateAsync(fromdate, todate);
        }
        
        public string GetPlanCustomerRevenueExpenseMonthYear(string month, string year) {
            return base.Channel.GetPlanCustomerRevenueExpenseMonthYear(month, year);
        }
        
        public System.Threading.Tasks.Task<string> GetPlanCustomerRevenueExpenseMonthYearAsync(string month, string year) {
            return base.Channel.GetPlanCustomerRevenueExpenseMonthYearAsync(month, year);
        }
        
        public string GetPlanCustomerRevenueExpenseByDate(string fromdate, string todate) {
            return base.Channel.GetPlanCustomerRevenueExpenseByDate(fromdate, todate);
        }
        
        public System.Threading.Tasks.Task<string> GetPlanCustomerRevenueExpenseByDateAsync(string fromdate, string todate) {
            return base.Channel.GetPlanCustomerRevenueExpenseByDateAsync(fromdate, todate);
        }
    }
}
